
openapi: 3.0.3
info:
  title: Student Portal API
  description: API for managing users, groups, files, announcements, and discussion threads in a student portal.
  version: 1.0.0
servers:
  - url: http://localhost:5000
    description: Local development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - name
        - email
        - password_hash
        - role
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        password_hash:
          type: string
        role:
          type: string
          enum: [student, teacher, admin]
        status:
          type: string
          enum: [active, inactive]
        approvalStatus:
          type: string
          enum: [pending, approved]
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
      example:
        id: "12345"
        name: "bizualem abebe"
        email: "bizualem.abebe@Gmail.com"
        password_hash: "hashedpassword"
        role: "student"
        status: "active"
        approvalStatus: "approved"
        createdBy: null
        createdAt: "2025-07-22T14:59:00Z"
    Group:
      type: object
      required:
        - name
        - created_by
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        created_by:
          type: string
        creators:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
      example:
        id: "67890"
        name: "CS101 Study Group"
        description: "Group for CS101 students"
        created_by: "12345"
        creators: ["12345"]
        created_at: "2025-07-22T14:59:00Z"
    GroupMembership:
      type: object
      required:
        - user_id
        - group_id
        - role_in_group
      properties:
        id:
          type: string
        user_id:
          type: string
        group_id:
          type: string
        role_in_group:
          type: string
          enum: [member, creator]
        joined_at:
          type: string
          format: date-time
      example:
        id: "98765"
        user_id: "12345"
        group_id: "67890"
        role_in_group: "member"
        joined_at: "2025-07-22T14:59:00Z"
    File:
      type: object
      required:
        - filename
        - path
        - size
        - uploaded_by
        - group_id
      properties:
        id:
          type: string
        filename:
          type: string
        path:
          type: string
        size:
          type: number
        uploaded_by:
          type: string
        group_id:
          type: string
        created_at:
          type: string
          format: date-time
      example:
        id: "54321"
        filename: "lecture.pdf"
        path: "Uploads/123456789-lecture.pdf"
        size: 1048576
        uploaded_by: "12345"
        group_id: "67890"
        created_at: "2025-07-22T14:59:00Z"
    DiscussionPost:
      type: object
      required:
        - content
        - group_id
        - created_by
      properties:
        id:
          type: string
        content:
          type: string
        group_id:
          type: string
        created_by:
          type: string
        attachments:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
      example:
        id: "11111"
        content: "Question about lecture 3"
        group_id: "67890"
        created_by: "12345"
        attachments: []
        created_at: "2025-07-22T14:59:00Z"
    DiscussionReply:
      type: object
      required:
        - content
        - group_id
        - created_by
        - parent_type
        - parent_id
      properties:
        id:
          type: string
        content:
          type: string
        group_id:
          type: string
        created_by:
          type: string
        parent_type:
          type: string
          enum: [DiscussionPost, Announcement]
        parent_id:
          type: string
        attachments:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
      example:
        id: "22222"
        content: "Check slide 10"
        group_id: "67890"
        created_by: "12345"
        parent_type: "DiscussionPost"
        parent_id: "11111"
        attachments: []
        created_at: "2025-07-22T14:59:00Z"
    Announcement:
      type: object
      required:
        - title
        - content
        - group_id
        - created_by
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        group_id:
          type: string
        created_by:
          type: string
        attachments:
          type: array
          items:
            type: string
        priority:
          type: string
          enum: [low, medium, high]
        pinned:
          type: boolean
        created_at:
          type: string
          format: date-time
      example:
        id: "33333"
        title: "Exam Schedule"
        content: "Exam on Friday"
        group_id: "67890"
        created_by: "12345"
        attachments: []
        priority: "high"
        pinned: true
        created_at: "2025-07-22T14:59:00Z"
paths:
  /auth/register:
    post:
      summary: Student self-registration
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Registration pending approval
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: string
        '400':
          description: Invalid input
  /auth/users:
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - role
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [student, teacher, admin]
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
      security:
        - bearerAuth: []
  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
        '403':
          description: Account pending or inactive
  /auth/me:
    get:
      summary: Get current user
      tags:
        - Authentication
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
  /admin/users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
  /admin/users/{id}/approve:
    patch:
      summary: Approve a pending user
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User approved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: string
        '400':
          description: Invalid request
        '404':
          description: User not found
      security:
        - bearerAuth: []
  /admin/users/{id}/status:
    patch:
      summary: Update user status
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [active, inactive]
      responses:
        '200':
          description: Status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  status:
                    type: string
        '400':
          description: Invalid status
        '404':
          description: User not found
      security:
        - bearerAuth: []
  /admin/users/{id}:
    delete:
      summary: Delete a user
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
      security:
        - bearerAuth: []
  /groups:
    post:
      summary: Create a new group
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid input
      security:
        - bearerAuth: []
    get:
      summary: List user's groups
      tags:
        - Groups
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
      security:
        - bearerAuth: []
  /groups/{groupId}:
    patch:
      summary: Update group details
      tags:
        - Groups
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group not found
      security:
        - bearerAuth: []
    delete:
      summary: Delete a group
      tags:
        - Groups
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Group not found
      security:
        - bearerAuth: []
  /groups/{groupId}/members:
    post:
      summary: Add a member to a group
      tags:
        - GroupMembership
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - role_in_group
              properties:
                user_id:
                  type: string
                role_in_group:
                  type: string
                  enum: [member, creator]
      responses:
        '201':
          description: Member added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembership'
        '400':
          description: Invalid input
        '404':
          description: Group or user not found
      security:
        - bearerAuth: []
    get:
      summary: Get group members
      tags:
        - GroupMembership
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of group members
          content:
            application/json:
              schema:
                type: object
                properties:
                  group_name:
                    type: string
                  members_count:
                    type: integer
                  members:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                        name:
                          type: string
                        role:
                          type: string
                        role_in_group:
                          type: string
        '404':
          description: Group not found
      security:
        - bearerAuth: []
  /groups/{groupId}/members/{userId}:
    delete:
      summary: Remove a member from a group
      tags:
        - GroupMembership
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Member removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid request
        '404':
          description: Group or membership not found
      security:
        - bearerAuth: []
  /groups/{groupId}/files:
    post:
      summary: Upload files to a group
      tags:
        - Files
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Files uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  files:
                    type: array
                    items:
                      $ref: '#/components/schemas/File'
        '400':
          description: No files uploaded
        '404':
          description: Group not found
      security:
        - bearerAuth: []
    get:
      summary: List group files
      tags:
        - Files
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of files
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      $ref: '#/components/schemas/File'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '404':
          description: Group not found
      security:
        - bearerAuth: []
  /files/{fileId}:
    get:
      summary: Download a file
      tags:
        - Files
      parameters:
        - in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File downloaded
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
      security:
        - bearerAuth: []
    delete:
      summary: Delete a file
      tags:
        - Files
      parameters:
        - in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: File not found
      security:
        - bearerAuth: []
  /groups/{groupId}/posts:
    post:
      summary: Create a discussion post
      tags:
        - Discussion
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - content
                - group_id
              properties:
                content:
                  type: string
                group_id:
                  type: string
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  post:
                    $ref: '#/components/schemas/DiscussionPost'
        '400':
          description: Invalid input
        '404':
          description: Group not found
      security:
        - bearerAuth: []
    get:
      summary: List discussion posts
      tags:
        - Discussion
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
        - in: query
          name: group_id
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/DiscussionPost'
                        - type: object
                          properties:
                            replyCount:
                              type: integer
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '404':
          description: Group not found
      security:
        - bearerAuth: []
  /posts/{postId}:
    get:
      summary: View a discussion post with replies
      tags:
        - Discussion
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post and replies
          content:
            application/json:
              schema:
                type: object
                properties:
                  post:
                    $ref: '#/components/schemas/DiscussionPost'
                  replies:
                    type: array
                    items:
                      $ref: '#/components/schemas/DiscussionReply'
        '404':
          description: Post not found
      security:
        - bearerAuth: []
    patch:
      summary: Update a discussion post
      tags:
        - Discussion
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Post updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  post:
                    $ref: '#/components/schemas/DiscussionPost'
        '400':
          description: Invalid input
        '404':
          description: Post not found
      security:
        - bearerAuth: []
    delete:
      summary: Delete a discussion post
      tags:
        - Discussion
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Post not found
      security:
        - bearerAuth: []
  /groups/{groupId}/replies:
    post:
      summary: Create a discussion reply
      tags:
        - Discussion
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - content
                - group_id
                - parent_type
                - parent_id
              properties:
                content:
                  type: string
                group_id:
                  type: string
                parent_type:
                  type: string
                  enum: [DiscussionPost, Announcement]
                parent_id:
                  type: string
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Reply created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  reply:
                    $ref: '#/components/schemas/DiscussionReply'
        '400':
          description: Invalid input
        '404':
          description: Group or parent not found
      security:
        - bearerAuth: []
  /posts/{postId}/replies/{replyId}:
    patch:
      summary: Update a discussion reply
      tags:
        - Discussion
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: path
          name: replyId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Reply updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  reply:
                    $ref: '#/components/schemas/DiscussionReply'
        '400':
          description: Invalid input
        '404':
          description: Reply not found
      security:
        - bearerAuth: []
    delete:
      summary: Delete a discussion reply
      tags:
        - Discussion
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: path
          name: replyId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reply deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Reply not found
      security:
        - bearerAuth: []
  /groups/{groupId}/announcements:
    post:
      summary: Create an announcement
      tags:
        - Announcements
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - content
                - group_id
              properties:
                title:
                  type: string
                content:
                  type: string
                group_id:
                  type: string
                priority:
                  type: string
                  enum: [low, medium, high]
                pinned:
                  type: boolean
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Announcement created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
        '400':
          description: Invalid input
        '404':
          description: Group not found
      security:
        - bearerAuth: []
    get:
      summary: List announcements
      tags:
        - Announcements
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
        - in: query
          name: group_id
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of announcements
          content:
            application/json:
              schema:
                type: object
                properties:
                  announcements:
                    type: array
                    items:
                      $ref: '#/components/schemas/Announcement'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '404':
          description: Group not found
      security:
        - bearerAuth: []
  /announcements/{id}:
    get:
      summary: View an announcement
      tags:
        - Announcements
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Announcement details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
        '404':
          description: Announcement not found
      security:
        - bearerAuth: []
    patch:
      summary: Update an announcement
      tags:
        - Announcements
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                priority:
                  type: string
                  enum: [low, medium, high]
                pinned:
                  type: boolean
      responses:
        '200':
          description: Announcement updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
        '400':
          description: Invalid input
        '404':
          description: Announcement not found
      security:
        - bearerAuth: []
    delete:
      summary: Delete an announcement
      tags:
        - Announcements
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Announcement deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Announcement not found
      security:
        - bearerAuth: []
